name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.ECR_REPOSITORY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine version bump type
        id: bump
        run: |
          MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $MESSAGE"

          if echo "$MESSAGE" | grep -q "BREAKING CHANGE"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$MESSAGE" | grep -q "^feat"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$MESSAGE" | grep -q "^fix"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
      - name: Bump version file
        id: version_bump
        run: |
          bump=${{ steps.bump.outputs.bump }}
          echo "Version bump type: $bump"

          version=$(cat VERSION)
          IFS='.' read -r major minor patch <<< "$version"

          if [ "$bump" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo $new_version > VERSION
          echo "New version: $new_version"

          echo "VERSION=$new_version" >> $GITHUB_ENV
      
      - name: Commit version bump
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add VERSION
          git commit -m "ci: bump version to $(cat VERSION)"
          git push origin main

      - name: Read version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Image version: $VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$VERSION .

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$IMAGE_NAME:$VERSION
      
      - name: Authenticate Docker on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "Pulling Docker image version ${{ env.VERSION }}"
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

            echo "Stopping existing container (if any)..."
            docker stop hello-container || true
            docker rm hello-container || true

            echo "Running new container..."
            docker run -d --name hello-container -p 80:80 ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

